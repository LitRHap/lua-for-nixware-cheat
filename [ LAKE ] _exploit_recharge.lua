
--[[
PHILIPHOOK DT INDICATOR
--]]

-- Setup font
local font_size = 25
local font = renderer.setup_font("C:/windows/fonts/verdanab.ttf", font_size, 0)

-- Exploit keybind check
local on_exploit_bind = ui.get_key_bind("rage_active_exploit_bind")
local on_exploit = ui.get_combo_box("rage_active_exploit")

-- Dunno't render on fakeducking
local on_fakeduck = ui.get_check_box("antihit_extra_fakeduck")
local on_fakeduck_bind = ui.get_key_bind("antihit_extra_fakeduck_bind")

-- Offsets
local m_iHealth = se.get_netvar("DT_BasePlayer", "m_iHealth") -- 0x100
local m_hActiveWeapon = se.get_netvar("DT_BaseCombatCharacter", "m_hActiveWeapon") -- 0x2EF8
local m_nTickBase = se.get_netvar("DT_BasePlayer", "m_nTickBase") -- 0x3430
local m_flNextPrimaryAttack = se.get_netvar("DT_BaseCombatWeapon", "m_flNextPrimaryAttack") -- 0x3238

-- Default settings
local m_nShiftedTicks = 14	-- ty linius
local shadow_offset = 1
local exploit_line_offset = 0
local exploit_line_lengh = 30
local color = color_t.new(210, 75, 75, 255)
local line_fill_time = 0
local exploit_name = "NULL"
local HS = 1

-- From Teselka's Advanced API
function IsExploitRecharged(local_player, player_weapon)

	local m_Tickbase = local_player:get_prop_int(m_nTickBase)
	
	m_Tickbase = local_player:get_prop_int(m_nTickBase) - m_nShiftedTicks
		
	local m_flPlayerTime = m_Tickbase * globalvars.get_interval_per_tick()
	
	if (m_flPlayerTime < player_weapon:get_prop_float(m_flNextPrimaryAttack)) then
	
		return false
		
	end
	
	return true
	
end

client.register_callback("paint", function()

	local local_player = entitylist:get_local_player()
	local screen = engine.get_screen_size()

	if local_player:get_prop_int(m_iHealth) < 1 then
		return 
	end
	
	-- Is exploits enabled?
	if on_exploit_bind:is_active() then
	
		-- Is exploits in use?
		if on_exploit:get_value() > 0 then
		
			-- Is not fakeducking?
			if not on_fakeduck_bind:is_active() or not on_fakeduck:get_value() then
		
				local ActiveWeaponHandle = local_player:get_prop_int(m_hActiveWeapon)
				local Weapon = entitylist.get_entity_from_handle(ActiveWeaponHandle)
				local Recharge = IsExploitRecharged(local_player, Weapon)		
		
				-- Recharging
				if not Recharge then
			
					exploit_line_offset = 0
				
					color = color_t.new(210, 75, 75, 255) -- Red
					
				-- Recharged			
				else
			
					-- Line fill time
					line_fill_time = math.floor(exploit_line_lengh / m_nShiftedTicks)
				
					if exploit_line_offset < exploit_line_lengh then
						exploit_line_offset = exploit_line_offset + line_fill_time
					end	
			
					color = color_t.new(0, 210, 255, 255) -- Lblue

				end
			
				-- Get exploit type
				if on_exploit:get_value() == HS then
					exploit_name = "HS"
				else
					exploit_name = "DT"
				end	

				-- Text overlay
				renderer.text(exploit_name, font, vec2_t.new(screen.x - screen.x + 10 + shadow_offset, screen.y / 2 + 25 + shadow_offset), font_size, color_t.new(0, 0, 0, 255))
			
				-- Text
				renderer.text(exploit_name, font, vec2_t.new(screen.x - screen.x + 10, screen.y / 2 + 25 ), font_size, color)
			
				-- Line overlay
				renderer.rect_filled(vec2_t.new(screen.x - screen.x + 9, screen.y / 2 + 50), vec2_t.new(screen.x - screen.x + 41, screen.y / 2 + 54), color_t.new(0, 0, 0, 155))
			
				-- Line
				renderer.rect_filled(vec2_t.new(screen.x - screen.x + 10, screen.y / 2 + 51), vec2_t.new(screen.x - screen.x + 10 + exploit_line_offset, screen.y / 2 + 53), color_t.new(0, 210, 255, 255))
				
			end	
			
		end
		
	end
	
end)